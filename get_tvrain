#!/usr/bin/perl

###
###	⛈	optimistiCli: TVRain.ru command line client intended to provide legitimate paying users access to the video archive.
###

use utf8;
use strict;

our $usage = 'Usage:
  get_tvrain [-h|--long-help] [-v] [-F] [-c <merge|save|pls>] [-q <hd|sd|lo>] 
             [-d <output dir>] [-o <output file name>] [-t <temp dir>] 
             [-i] [-y] [-C <config file>] <Video ID | Page with video URL> 

TVRain.ru show archive command line client. Legitimate paying users only! 

To download a show in current directory run: 
  get_tvrain http://tvrain.ru/teleshow/reportazh/the_rain_is_falling-123456/

To get detailed options description run: 
  get_tvrain --long-help
';

our $long_help = $usage . '
Options:
  -h Show usage and exit
  -v Verbose output, prints a lot of debugging stuff to STDERR
  -F Force first run, resets all options, see below
  -c Command, instructs get_tvrain what to do:
       merge - downloads all parts of the video and merges them into one 
               matroska file, requires temp directory for downloaded parts, 
               this is the default command
       save  - saves each part of the video as is
       pls   - does not download any video, saves a playlist with video URLs
  -q Video quality selector, available options are:
       hd - high definition aka 720p (default)
       sd - standard definition aka 480p
       lo - low bitrate aka 360p
  -d Write output file(s) to the specified directory, defaults to current 
     directory
  -o Set output file(s) name, if omitted the article / feature name is used 
     to compose the file name(s); overrides -d and -i
  -t Use specified directory to temporarily store downloaded video parts for 
     the "merge" command, if omitted looks up temp_dir in the configuration 
     file, which defaults to the current directory
  -i Use video ID for the file(s) name
  -y Override output file(s) in case of naming conflict, if not specified 
     file name(s) will be changed to avoid overwriting
  -C Use specified configuration file instead of the default one

Examples:
  Download a show by URL, if video consists of several parts merge them 
  together. Use /tmp to store temporary files.
  get_tvrain -t /tmp http://tvrain.ru/teleshow/reportazh/falling_rain-123456/

  Download a show known by its ID to the Desktop. Select low bitrate to 
  preserve the bandwidth. If there are several video files save them 
  separately. Name files using show ID.
  get_tvrain -d ~/Desktop -q lo -c save -i 123456

  Create a custom-named playlist of the standard definition videos. If a 
  playlist by the same name already exists overwrite it.
  get_tvrain -q sd -o /mnt/autoplay/tvrain.pls -c pls -y 123456

Configuration file:
  The configuration file is .get_tvrain.conf in your home directory, This file 
  is created automatically during the first run. Use -C option to run with 
  alternative configuration file. File format is name=value, no whitespaces 
  around the "=", no comments after the value are allowed. Encoding is UTF-8.
  Noteworthy options:
    device_uid
      Client-side hardware unique identifier / serial number. In fact this 
      value is randomly generated during the first run.
    auth
      Authentication key. This value is obtained from the server when the 
      client is linked to TVRain.ru user account as a part of the first run 
      routine.
    temp_dir
      The directory to temporarily store downloaded video parts for the 
      "merge" command. Please make sure the directory is on a reasonably fast 
      storage device (ie the use of thumb drives and flash cards is 
      discouraged) and that it has enough free space (4Gb would do). If not 
      set the current directory or the value passed with the -t option is 
      used.

First run:
  When run for the first time the "first run routine" is invoked to configure 
  the application. It does as follows:
    1. configuration file is created
    2. unique identifier is randomly generated
    3. client is linked to the TVRain.ru user account
    4. temporary directory is set
  To clear all the settings the first run routine can be re-run manually 
  by specifying the -F option or just by deleting the configuration file.

Linking:
  In order to gain access to the TVRain.ru show archive the client software 
  should be "linked" to an active paid user account. Linking happens during 
  the first run and requires internet access and user interaction.

';


use open IO  => ":encoding(utf8)";
binmode STDOUT, ":utf8";
binmode STDERR, ":utf8";

use Env qw(HOME);
use Config::Tiny;
use HTTP::Headers;
use HTTP::Request;
use CGI::Utils;
use LWP::UserAgent;
use JSON;
use MIME::Base64 qw(encode_base64);
use Getopt::Long qw(:config no_ignore_case require_order bundling);
use IO::Scalar;


### Constants

our $CONFIG_FILE_NAME = '.get_tvrain.conf';
our $DEVICE_NAME = 'JaneErye Client'; #'optimistiCli';
our $URL_BASE = 'https://api.tvrain.ru/api_v2';
our $API_CONSUMER_KEY = 'a908545f-80af-4f99-8dac-fb012cec';
our $API_VERSION = '2.13';
our $LINK_POLL_TIMEOUT_SEC=15;


### Globals

our $config;
our $config_file_path;
our $cgi_utils;
our $user_agent;
our $me;
our $options;
our $video_id;

### Init

$config_file_path = "$HOME/$CONFIG_FILE_NAME";
$cgi_utils = CGI::Utils->new;
$user_agent = LWP::UserAgent->new;

# Set options defaults
$options = {
	'help'				=> 0,
	'long-help'		=> 0,
	'verbose'			=> 0,
	'first-run'		=> 0,
	'command'			=> 'merge',
	'quality'			=> 'hd',
	'output-dir'	=> undef,
	'output-file'	=> undef,
	'temp-dir'		=> undef,
	'id'					=> 0,
	'yes-all'			=> 0,
	'config'			=> undef,
};

### Functions

sub debug {
	my $title = shift;
	my $text = shift;
	
	$title = uc $title;
	print STDERR "============ $title START ============\n$text\n============= $title END =============\n\n";
}

sub brag_and_exit {
	my $err_message = shift;
	my $exit_code = shift;

	if ($err_message) {
		chomp $err_message;
		$err_message =~ s/^/  /gms;
		$err_message = "Error:\n$err_message\n\n";
		$exit_code = 1 unless $exit_code;
	}

	print $err_message, $usage, "\n";
	exit $exit_code;
}

# Creates an empty file and immediately deletes it
sub get_file_creation_error {
	my $file_path = shift;

	return "File exists '$file_path" if -e $file_path;

	open FH, "> $file_path" or return "Can not write to '$file_path', $!";
	close FH;

	unlink $file_path or die "Failed to delete touched file '$file_path'";

	return undef;
}

sub check_if_dir_is_wrieable {
	my $dir_path = shift;
	my $dir_name = shift;

	return unless defined $dir_path;

	brag_and_exit "$dir_name '$dir_path' does not exist" unless -e $dir_path;

	brag_and_exit "$dir_name '$dir_path' is not a directory" unless -d $dir_path;

	brag_and_exit "$dir_name '$dir_path' can not be written to" unless -w $dir_path;

	$dir_path;
}

sub check_option_command {
	$_ = shift;

	return 'merge' if /^merge|mkv|join|matroska$/i;

	return 'save' if /^save|download|dl|asis|mp4|dump$/i;

	return 'pls' if /^pls|playlist|pls|play.list|m3u|m3u8$/i;

	brag_and_exit "Unknown command $_";
}

sub check_option_quality {
	$_ = shift;

	return 'hd' if /^hd|hq|high|hi|720|720p$/i;

	return 'sd' if /^sd|sq|stand.*|std|480|480p$/i;

	return 'lo' if /^lo|ld|lq|lo|low|360|360p$/i;

	brag_and_exit "Unknown quality $_";
}

sub check_option_output_dir {
	my $output_dir = shift;

	return check_if_dir_is_wrieable $output_dir, 'Output directory';
}

sub check_option_output_file {
	my $output_file = shift;

	return unless defined $output_file;

	if (-e $output_file) {
		# File exist: check if it is a proper file and if it can be overwritten

		brag_and_exit "Can not overwrite non-file path '$output_file'" unless -f $output_file;

		# TODO: Simlinks get through the -f above. Decide if they need some special tratment.

		brag_and_exit "Can not overwrite file '$output_file'" unless -w $output_file;
	} else {
		# File does not exist: check if it can be created and written to

		my $file_creation_error = get_file_creation_error $output_file;
		brag_and_exit $file_creation_error if defined $file_creation_error;
	}

	return $output_file;
}

sub check_option_temp_dir {
	my $temp_dir = shift;

	return check_if_dir_is_wrieable $temp_dir, 'Temporary directory';
}

sub check_option_config {
	my $config_file_path = shift;

	if (-e $config_file_path) {
		brag_and_exit "Config file '$config_file_path' can not be written to" unless -w $config_file_path;

		# Avoid accidental damage: accept config file only if the file is a proper config file or if it is an empty file
		brag_and_exit "Cowardly refusing to use non-config file '$config_file_path'" 
			unless defined Config::Tiny->read($config_file_path, 'utf8') 
				|| (stat($config_file_path))[7] == 0;
	} else {
		my $file_creation_error = get_file_creation_error $config_file_path;
		brag_and_exit $file_creation_error if defined $file_creation_error;
	}
	
	return $config_file_path;
}

sub cook_rand_xxxx {
	sprintf "%04X", int rand 0x10000;
}

sub cook_device_uid {
	&cook_rand_xxxx . '-' . 
	&cook_rand_xxxx . '-' . 
	&cook_rand_xxxx . '-' . 
	&cook_rand_xxxx . '-' . 
	&cook_rand_xxxx . '-' . 
	&cook_rand_xxxx . '-' . 
	&cook_rand_xxxx . '-' . 
	&cook_rand_xxxx;
}

sub cook_quickauth_request {
	{
		'name'					=> 'quickauth',
		'method'				=> 'POST',
		'url'						=> "$URL_BASE/user/quickauth/",
		'post_params'		=> {
			'device_uid'		=> $config->{_}->{'device_uid'},
		},
		'extra_headers'	=> {
		},
		'error_overrides'	=> {
		},
	}
}

sub cook_startlinking_request {
	{
		'name'					=> 'startlinking',
		'method'				=> 'POST',
		'url'						=> "$URL_BASE/user/startlinking/",
		'post_params'		=> {
		},
		'extra_headers'	=> {
		},
		'error_overrides'	=> {
		},
	}
}

sub cook_link_request {
	my $oid = shift;

	{
		'name'						=> 'link',
		'method'					=> 'POST',
		'url'							=> "$URL_BASE/user/link/",
		'post_params'			=> {
			'device_uid'			=> $config->{_}->{'device_uid'},
			'oid'							=> $oid,
		},
		'extra_headers'		=> {
		},
		'error_overrides'	=> {
			'401'							=> {
				'error'						=> '401 Unauthorized',
			}
		},
	}
}

sub cook_me_request {
	{
		'name'						=> 'me',
		'method'					=> 'GET',
		'url'							=> "$URL_BASE/user/me/",
		'post_params'			=> {
		},
		'extra_headers'		=> {
		},
		'error_overrides'	=> {
		},
	}
}

sub cook_videos_request {
	my $video_id = shift;

	{
		'name'						=> 'videos',
		'method'					=> 'GET',
		'url'							=> "$URL_BASE/articles/$video_id/videos/",
		'post_params'			=> {
		},
		'extra_headers'		=> {
		},
		'error_overrides'	=> {
			'404'							=> {
				'error'						=> '404 Not Found',
			}
		},
	}
}

sub write_config {
	$config->write($config_file_path, 'utf8') or die "Error writing config " . $config->errstr();
}

sub cook_auth {
	my $user_id = shift;
	my $device_token = shift;

	'Basic ' . encode_base64 "$user_id:$device_token", '';
}

sub call_api {
	my $api_request = shift;

	# TODO: Try implementing via $user_agent->default_headers
	my $headers = HTTP::Headers->new(
		'X-User-Agent'									=> "$DEVICE_NAME; API_CONSUMER_KEY=$API_CONSUMER_KEY",
		'Accept'												=> "application/tvrain.api.$API_VERSION+json",
		'Content-Type'									=> 'application/x-www-form-urlencoded',
	);

	my $encoded_params = $cgi_utils->url_encode_vars($api_request->{'post_params'}, '&') if keys %{$api_request->{'post_params'}};
	$api_request->{'extra_headers'}->{'Content-Length'} = length $encoded_params if $encoded_params;

	foreach my $key (keys %{$api_request->{'extra_headers'}}) {
		$headers->push_header($key => $api_request->{'extra_headers'}->{$key});
	}

	$headers->push_header('Authorization' => $config->{_}->{'auth'}) if defined $config->{_}->{'auth'};

	my $request = HTTP::Request->new(
		$api_request->{'method'},
		$api_request->{'url'},
		$headers,
		$encoded_params
	);

	debug 'request', $request->as_string if $options->{'verbose'};

	my $response = $user_agent->request($request);

	if ($response->is_success) {
		debug 'response', $response->content if $options->{'verbose'};

		return decode_json $response->content;
	} else {
		if (defined $api_request->{'error_overrides'}->{$response->code}) {
			debug 'response', 'Executing error override for HTTP return code ' . $response->code if $options->{'verbose'};

			return $api_request->{'error_overrides'}->{$response->code};
		} else {
			die "Error processing “$api_request->{'name'}” API call: " . $response->status_line;
		}
	}
}

sub read_command_line_options {

	my $error_message;
	my $error = tie *STDERR, 'IO::Scalar', \$error_message;

	my $all_went_well = GetOptions ($options, 
		'help|h',
		'long-help',
		'verbose|v',
		'first-run|F',
		'command|c=s',
		'quality|q=s',
		'output-dir|d=s',
		'output-file|o=s',
		'temp-dir|t=s',
		'id|i',
		'yes-all|y',
		'config|C=s',
	);

	undef $error;
	untie *STDERR;

	brag_and_exit $error_message unless $all_went_well;
}

### Read command line options
&read_command_line_options;

### Deal with help requests

print $long_help and exit if $options->{'long-help'};

&brag_and_exit if $options->{'help'};


### Interpret command line options

$options->{'command'} = check_option_command $options->{'command'} if defined $options->{'command'};
$options->{'quality'} = check_option_quality $options->{'quality'} if defined $options->{'quality'};
$options->{'output-dir'} = check_option_output_dir $options->{'output-dir'} if defined $options->{'output-dir'};
$options->{'output-file'} = check_option_output_file $options->{'output-file'} if defined $options->{'output-file'};
$options->{'temp-dir'} = check_option_temp_dir $options->{'temp-dir'} if defined $options->{'temp-dir'};
$options->{'config'} = check_option_config $options->{'config'} if defined $options->{'config'};

debug 'command', $options->{'command'} if $options->{'verbose'};
debug 'quality', $options->{'quality'} if $options->{'verbose'};
debug 'output dir', $options->{'output-dir'} if $options->{'verbose'};
debug 'output file', $options->{'output-file'} if $options->{'verbose'};
debug 'temp dir', $options->{'temp-dir'} if $options->{'verbose'};
debug 'config', $options->{'config'} if $options->{'verbose'};

exit;


$video_id = pop or die "No video ID or URL";
# TODO: print usage if no vido id

# Check and fix video ID
if ($video_id =~ /^\d+$/) {
	# Good 
} elsif ($video_id =~ /tvrain\.ru.*-(\d+)\/?$/) {
	$video_id = $1;
} else {
	die "Invalid vido ID or URL";
	# TODO: Print proper error message and usage
}

debug 'video id', $video_id if $options->{'verbose'};


### Read system config and init it if needed

$config = Config::Tiny->read($config_file_path, 'utf8');

unless (defined $config) {
	print "Empty / invalid config file → recreating\n";

	$config = Config::Tiny->new;
	$config->{_}->{'device_uid'} = &cook_device_uid;
	&write_config;

	print "New device uid created\n";
}


### Login or else link

unless (defined $config->{_}->{'auth'}) {
	print "Absent / invalid authentication → linking to account\n";
	
	my $startlinking_response = call_api &cook_startlinking_request;

	print "Code for linking: $startlinking_response->{'code'}\n\n";
	print "Q: What shall I do now?\n";
	print "A: 1. Open http://tvrain.ru/profile/ in brwoser\n";
	print "   2. Log into your account\n";
	print "   3. Browse to Profile → Devices\n";
	print "   4. Enter the linking code and perss Link\n";
	print "   5. Wait until the get_tvrain resumes\n\n";

	my $link_request = cook_link_request $startlinking_response->{'oid'};

	print "Trying to link…\n";
	my $link_response;

	do {
		# TODO: Add some kind of sandwatch
		sleep $LINK_POLL_TIMEOUT_SEC;

		$link_response = call_api $link_request;
	} until (defined $link_response->{'user_id'});

	print "Link established\n";

	$config->{_}->{'user_id'} = $link_response->{'user_id'};
	$config->{_}->{'auth'} = cook_auth $link_response->{'user_id'}, $link_response->{'device_token'};

	&write_config;
}


### Get user profile

$me = call_api &cook_me_request;
# TODO: Handle authentication error
print "Login Ok, subscription active for $me->{'vip'} more days\n";


### Get video info

my $videos_response = call_api cook_videos_request $video_id;

die "Video not found" if defined $videos_response->{'error'};
# TODO: Properly inform user about bad video ID
